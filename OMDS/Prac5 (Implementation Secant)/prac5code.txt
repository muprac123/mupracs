import math

# Define the function (can change as needed)
def f(x):
    return x**3 - x - 2
    # Example from Newton’s: return x**2 - 2
    # Example from Newton’s Prac Problem 1: return x**3 - 4*x - 9

def secant_method(x0, x1, tol=1e-6, max_iter=100):
    print(f"Initial guesses: x0 = {x0:.6f}, x1 = {x1:.6f}")
    fx0 = f(x0)
    fx1 = f(x1)

    if abs(fx0) < tol:
        print("x0 is already a root within tolerance.")
        return x0
    if abs(fx1) < tol:
        print("x1 is already a root within tolerance.")
        return x1

    for i in range(max_iter):
        if abs(fx1 - fx0) < 1e-12:
            if abs(fx1) < tol:
                print("Converged due to f(x1) being small after denominator became small.")
                return x1
            raise ValueError("Denominator in Secant method is too small and f(x1) is not small.")

        # Secant formula
        x_next = x1 - fx1 * (x1 - x0) / (fx1 - fx0)
        fx_next = f(x_next)

        print(f"Iteration {i+1}: x_next = {x_next:.6f}, f(x_next) = {fx_next:.6e}")

        if abs(x_next - x1) < tol or abs(fx_next) < tol:
            return x_next

        # Update for next iteration
        x0, fx0 = x1, fx1
        x1, fx1 = x_next, fx_next

    raise ValueError("Secant method did not converge within max_iter")

# Example usage for f(x) = x^3 - x - 2
x0_val = 1.0
x1_val = 2.0
try:
    root = secant_method(x0_val, x1_val, tol=1e-7)
    print(f"\nApproximate root for f(x) = x^3 - x - 2: {root:.7f}")
except ValueError as e:
    print(f"Error: {e}")

# Example usage for f(x) = x^2 - 2 (to compare with Newton’s)
print("\n--- Secant method for f(x) = x^2 - 2 ---")
def f_sqrt(x): return x**2 - 2

# Temporarily override f for this example
_f_original = f
globals()['f'] = f_sqrt

try:
    root_sqrt = secant_method(x0=1.0, x1=2.0, tol=1e-7)
    print(f"\nApproximate root for f(x) = x^2 - 2: {root_sqrt:.7f} (actual sqrt(2) ~ {math.sqrt(2):.7f})")
except ValueError as e:
    print(f"Error: {e}")

# Restore original f
globals()['f'] = _f_original
